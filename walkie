<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Walkie-Talkie App</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8;
            transition: background-color 0.3s ease;
        }
        .dark body {
            background-color: #1a202c;
        }
        .talk-button-active {
            transform: scale(1.1);
            background-color: #ef4444; /* red-500 */
            box-shadow: 0 0 40px rgba(239, 68, 68, 0.7); /* red-500 with alpha */
        }
        .message-box {
            animation: fadeIn 0.5s ease-in-out;
        }
        .fade-out {
            opacity: 0;
            transition: opacity 0.5s ease-in-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4 transition-colors duration-300 dark:bg-gray-900">

    <!-- Walkie-Talkie Container -->
    <div class="bg-white dark:bg-gray-800 p-8 rounded-3xl shadow-2xl w-full max-w-sm flex flex-col items-center justify-center space-y-8 transform transition-transform duration-500 hover:scale-105">
        
        <!-- User ID Display -->
        <div class="w-full text-center">
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Your User ID:</label>
            <p id="user-id" class="mt-1 text-base font-mono bg-gray-200 dark:bg-gray-700 p-2 rounded-lg break-all text-gray-800 dark:text-gray-200"></p>
        </div>

        <!-- Connection Inputs -->
        <div class="w-full space-y-4">
            <div>
                <label for="channel-id-input" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Join a Group Channel</label>
                <div class="flex mt-1">
                    <input type="text" id="channel-id-input" placeholder="Enter channel name" class="flex-grow p-2 border border-gray-300 dark:border-gray-600 rounded-l-lg bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <button id="join-channel-button" class="p-2 bg-blue-500 text-white rounded-r-lg font-medium hover:bg-blue-600 transition-colors duration-200">Join</button>
                </div>
            </div>
            <div>
                <label for="direct-id-input" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Start a One-on-One Chat</label>
                <div class="flex mt-1">
                    <input type="text" id="direct-id-input" placeholder="Enter recipient's User ID" class="flex-grow p-2 border border-gray-300 dark:border-gray-600 rounded-l-lg bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-green-500">
                    <button id="set-direct-button" class="p-2 bg-green-500 text-white rounded-r-lg font-medium hover:bg-green-600 transition-colors duration-200">Start</button>
                </div>
            </div>
        </div>
        
        <!-- App Title and Status -->
        <h1 class="text-3xl font-bold text-center text-gray-800 dark:text-white transition-colors duration-300">Walkie-Talkie</h1>
        <p id="status-message" class="text-lg text-gray-600 dark:text-gray-400 text-center transition-colors duration-300">Connecting...</p>

        <!-- Talk Button -->
        <div class="relative w-48 h-48 sm:w-64 sm:h-64 flex items-center justify-center">
            <button id="talk-button"
                    class="w-48 h-48 sm:w-64 sm:h-64 rounded-full bg-blue-500 text-white flex items-center justify-center text-2xl font-bold shadow-xl cursor-pointer
                           transition-all duration-300 transform active:scale-110 active:bg-blue-600 active:shadow-2xl">
                TALK
            </button>
        </div>

        <!-- Message Box -->
        <div id="message-box" class="message-box mt-4 p-4 w-full bg-gray-100 dark:bg-gray-700 rounded-xl transition-all duration-500 text-gray-800 dark:text-white hidden">
            <p id="message-text" class="text-center"></p>
        </div>
    </div>
    
    <!-- Firebase Libraries -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, addDoc, onSnapshot, collection, query, where, serverTimestamp, setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Global variables for Firebase and app state
        let app;
        let db;
        let auth;
        let userId;
        let mediaRecorder;
        let audioChunks = [];
        let unsubscribe = null;
        let currentRecipientId = null;
        let currentChannelId = null;
        let currentStatus = 'Disconnected';

        // Get global variables provided by the Canvas environment
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        // UI Elements
        const talkButton = document.getElementById('talk-button');
        const statusMessage = document.getElementById('status-message');
        const messageBox = document.getElementById('message-box');
        const messageText = document.getElementById('message-text');
        const userIdDisplay = document.getElementById('user-id');
        const channelIdInput = document.getElementById('channel-id-input');
        const joinChannelButton = document.getElementById('join-channel-button');
        const directIdInput = document.getElementById('direct-id-input');
        const setDirectButton = document.getElementById('set-direct-button');

        // Function to update the status message on the UI
        const updateStatus = (message) => {
            currentStatus = message;
            statusMessage.textContent = message;
        };
        
        // Function to show a message box
        const showMessage = (message, duration = 3000) => {
            messageText.textContent = message;
            messageBox.classList.remove('hidden', 'fade-out');
            setTimeout(() => {
                messageBox.classList.add('fade-out');
                setTimeout(() => {
                    messageBox.classList.add('hidden');
                    messageText.textContent = '';
                }, 500); // Wait for fade-out transition to complete
            }, duration);
        };

        // Initialize Firebase
        const initFirebase = async () => {
            try {
                if (!firebaseConfig.apiKey) {
                    throw new Error("Firebase config is missing. Cannot initialize Firestore.");
                }
                app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);
                setLogLevel('debug');

                onAuthStateChanged(auth, async (user) => {
                    if (user) {
                        userId = user.uid;
                        userIdDisplay.textContent = userId;
                        updateStatus('Ready. Press and hold to talk.');
                        setupRecorder();
                    } else {
                        try {
                            if (initialAuthToken) {
                                await signInWithCustomToken(auth, initialAuthToken);
                            } else {
                                await signInAnonymously(auth);
                            }
                        } catch (error) {
                            console.error("Firebase Auth Error:", error);
                            updateStatus('Authentication failed.');
                        }
                    }
                });
            } catch (error) {
                console.error("Firebase Initialization Error:", error);
                updateStatus('App initialization failed.');
            }
        };

        // Set up the MediaRecorder to capture audio
        const setupRecorder = async () => {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                mediaRecorder = new MediaRecorder(stream);

                mediaRecorder.ondataavailable = event => {
                    audioChunks.push(event.data);
                };

                mediaRecorder.onstop = async () => {
                    const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                    audioChunks = [];
                    
                    // Encode audio to base64 to store in Firestore
                    const reader = new FileReader();
                    reader.readAsDataURL(audioBlob);
                    reader.onloadend = async () => {
                        const base64data = reader.result;
                        await uploadAudioToFirestore(base64data);
                    };
                };
            } catch (err) {
                console.error("Microphone access error:", err);
                updateStatus('Microphone permission denied. Please enable it.');
                talkButton.disabled = true;
            }
        };

        // Function to upload audio to Firestore
        const uploadAudioToFirestore = async (audioData) => {
            if (!currentChannelId && !currentRecipientId) {
                showMessage("No channel or recipient set. Set a connection first.");
                updateStatus(currentStatus);
                return;
            }

            try {
                const audioRef = collection(db, 'artifacts', appId, 'public', 'data', 'messages');
                
                const messageDoc = {
                    senderId: userId,
                    audioData: audioData,
                    timestamp: serverTimestamp(),
                };

                if (currentChannelId) {
                    messageDoc.channelId = currentChannelId;
                    showMessage(`Sending to channel ${currentChannelId}...`);
                } else if (currentRecipientId) {
                    messageDoc.recipientId = currentRecipientId;
                    showMessage(`Sending to ${currentRecipientId}...`);
                }

                await addDoc(audioRef, messageDoc);
                updateStatus(currentStatus);
            } catch (e) {
                console.error("Error adding document: ", e);
                showMessage("Error sending message.");
                updateStatus(currentStatus);
            }
        };

        // Function to start listening for incoming messages
        const startListening = () => {
            if (unsubscribe) {
                unsubscribe();
            }

            const messagesRef = collection(db, 'artifacts', appId, 'public', 'data', 'messages');
            let q;

            if (currentChannelId) {
                q = query(messagesRef, where("channelId", "==", currentChannelId));
            } else if (currentRecipientId) {
                q = query(messagesRef, where("recipientId", "==", userId));
            } else {
                return;
            }
            
            // Listen for real-time updates
            unsubscribe = onSnapshot(q, (snapshot) => {
                snapshot.docChanges().forEach((change) => {
                    if (change.type === "added") {
                        const message = change.doc.data();
                        if (message.senderId !== userId) {
                            playAudio(message.audioData);
                        }
                    }
                });
            }, (error) => {
                console.error("Listening failed:", error);
            });
        };

        // Play audio from base64 string
        const playAudio = (base64String) => {
            const audio = new Audio(base64String);
            audio.play().catch(e => console.error("Error playing audio:", e));
        };

        // Event listeners for the buttons
        joinChannelButton.addEventListener('click', () => {
            const channelId = channelIdInput.value.trim();
            if (channelId) {
                currentChannelId = channelId;
                currentRecipientId = null;
                updateStatus(`Connected to channel: ${channelId}`);
                showMessage(`Joined channel: ${channelId}`, 2000);
                startListening();
            } else {
                showMessage("Please enter a channel name.");
            }
        });

        setDirectButton.addEventListener('click', () => {
            const recipientId = directIdInput.value.trim();
            if (recipientId) {
                currentRecipientId = recipientId;
                currentChannelId = null;
                updateStatus(`Direct message mode to: ${recipientId}`);
                showMessage(`Set to message ${recipientId}`, 2000);
                startListening();
            } else {
                showMessage("Please enter a recipient ID.");
            }
        });

        talkButton.addEventListener('mousedown', () => {
            if (mediaRecorder && mediaRecorder.state === 'inactive') {
                updateStatus('Recording... Release to send');
                mediaRecorder.start();
            }
        });

        talkButton.addEventListener('mouseup', () => {
            if (mediaRecorder && mediaRecorder.state === 'recording') {
                updateStatus('Sending...');
                mediaRecorder.stop();
            }
        });

        talkButton.addEventListener('mouseleave', () => {
            if (mediaRecorder && mediaRecorder.state === 'recording') {
                updateStatus('Sending...');
                mediaRecorder.stop();
            }
        });

        talkButton.addEventListener('touchstart', (e) => {
            e.preventDefault();
            if (mediaRecorder && mediaRecorder.state === 'inactive') {
                updateStatus('Recording... Release to send');
                mediaRecorder.start();
            }
        });

        talkButton.addEventListener('touchend', (e) => {
            e.preventDefault();
            if (mediaRecorder && mediaRecorder.state === 'recording') {
                updateStatus('Sending...');
                mediaRecorder.stop();
            }
        });

        // Initial setup on window load
        window.onload = initFirebase;

    </script>
</body>
</html>

